<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Y&amp;F</title>
    <link>https://qianfuxin.gitHub.io/tags/python/</link>
    <description>Recent content in Python on Y&amp;F</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 22 Feb 2025 10:58:08 +0000</lastBuildDate>
    <atom:link href="https://qianfuxin.gitHub.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python离线环境以及独立环境的几种方式</title>
      <link>https://qianfuxin.gitHub.io/post/python%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E7%8B%AC%E7%AB%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sat, 22 Feb 2025 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/python%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E7%8B%AC%E7%AB%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;起因&#34;&gt;起因&lt;/h1&gt;&#xA;&lt;p&gt;最近遇到&lt;code&gt;小可爱&lt;/code&gt;的机器，没有外网，所以安装独立的python极为别扭&lt;/p&gt;&#xA;&lt;h1 id=&#34;方法&#34;&gt;方法&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;conda离线安装&#xA;首先在联网的机器上，准备安装包，然后把安装包拷贝到离网机器后安装&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置安装包位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkgs_dirs:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - /home/up/myconda/pkgs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装环境到安装包&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create -n py38_pytorch pytorch python&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;3.8.5 --download-only&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将安装包拷贝到指定位置，在离网机器上安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create -n offlinepy38 pytorch python&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;3.8.5 --offline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;conda环境打包&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda install conda-pack&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda pack -n tf-1.15.0-py3.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xzf tf-1.15.0-py3.6.tar.gz -C tf-1.15.0-py3.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source tf-1.15.0-py3.6/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;python venv&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>分享自己py代码到PyPI</title>
      <link>https://qianfuxin.gitHub.io/post/%E5%88%86%E4%BA%AB%E8%87%AA%E5%B7%B1py%E4%BB%A3%E7%A0%81%E5%88%B0pypi/</link>
      <pubDate>Mon, 07 Oct 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/%E5%88%86%E4%BA%AB%E8%87%AA%E5%B7%B1py%E4%BB%A3%E7%A0%81%E5%88%B0pypi/</guid>
      <description>&lt;h3 id=&#34;准备条件&#34;&gt;准备条件&lt;/h3&gt;&#xA;&lt;p&gt;PyPI的账号&lt;/p&gt;&#xA;&lt;h3 id=&#34;代码格式&#34;&gt;代码格式&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filtered_flask/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-- filtered_flask/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |-- __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |-- app.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-- tests/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-- setup.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-- README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-- MANIFEST.in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;filtered_flask/app.py&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask, Response&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 装饰器用于全局信息过滤&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.after_request&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;global_filter&lt;/span&gt;(response):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 检查响应内容是否包含 &amp;#34;test&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 如果包含 &amp;#34;test&amp;#34;，可以采取过滤、修改或其他操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        filtered_content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filtered&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_data(filtered_content)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; response&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 一个简单的路由返回包含 &amp;#34;test&amp;#34; 的内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.route&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This is a test message.&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;filtered_flask/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .app &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;setup.py&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; setuptools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setup, find_packages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;filtered_flask&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;packages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_packages(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;install_requires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Flask&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;classifiers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Programming Language :: Python :: 3&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;MANIFEST.in&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;include README&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recursive&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;include filtered_flask&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;templates &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recursive&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;include filtered_flask&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;static &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;README.md&lt;/p&gt;</description>
    </item>
    <item>
      <title>sqlalchemy操作数据库</title>
      <link>https://qianfuxin.gitHub.io/post/sqlalchemy%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 26 Sep 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/sqlalchemy%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>&lt;h1 id=&#34;代码&#34;&gt;代码&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; create_engine, text&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DB_URI &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mysql+pymysql://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    USERNAME, PASSWORD, HOSTNAME, POST, DATABASE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# SQLAlchemy 2.0.23&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    db_engine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_engine(DB_URI)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; db_engine&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; conn:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sql_query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM some_table WHERE id=:id&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(text(sql_query), {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;完成&amp;#34;&lt;/span&gt;, result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowcount, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;行被更新。&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 如果是更新等语句要提交&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>rabbitMQ的配置及python调用</title>
      <link>https://qianfuxin.gitHub.io/post/rabbitmq%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8Apython%E8%B0%83%E7%94%A8/</link>
      <pubDate>Wed, 25 Sep 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/rabbitmq%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8Apython%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;配置rabbitmq&#34;&gt;配置rabbitMQ&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.8&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rabbitmq:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image: rabbitmq:3-management&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    container_name: rabbitmq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ports:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5672:5672&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;15672:15672&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    environment:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      RABBITMQ_DEFAULT_USER: user&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      RABBITMQ_DEFAULT_PASS: password&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    volumes:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - /dc/rabbitmq:/var/lib/rabbitmq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;生产者&#34;&gt;生产者&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pika&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BlockingConnection(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ConnectionParameters(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5672&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PlainCredentials(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;channel()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue_declare(queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log_queue&amp;#39;&lt;/span&gt;, durable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_publish(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        exchange&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        routing_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log_queue&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;message,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        properties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BasicProperties(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            delivery_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# make message persistent&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [x] Sent &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;消费者&#34;&gt;消费者&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pika&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BlockingConnection(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ConnectionParameters(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5672&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, pika&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PlainCredentials(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;channel()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;queue_declare(queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log_queue&amp;#39;&lt;/span&gt;, durable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callback&lt;/span&gt;(ch, method, properties, body):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [x] Received &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;basic_consume(queue&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;log_queue&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      on_message_callback&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;callback,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      auto_ack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_consuming()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>用python进行录音</title>
      <link>https://qianfuxin.gitHub.io/post/python%E5%BD%95%E9%9F%B3/</link>
      <pubDate>Wed, 25 Sep 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/python%E5%BD%95%E9%9F%B3/</guid>
      <description>&lt;h1 id=&#34;代码&#34;&gt;代码&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pyaudio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; wave&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AudioRecorder&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pyaudio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PyAudio()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;device_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recording &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recording_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_input_devices&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;列出所有可用的录音设备&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            device_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_device_count()):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                device_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_device_info_by_index(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 筛选出录音设备&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; device_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maxInputChannels&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    device_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((i, device_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Index: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, Name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;device_info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; device_list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start_recording&lt;/span&gt;(self, device_index, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output.wav&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;使用指定设备开始录音&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;device_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; device_index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recording &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 启动录音流&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pyaudio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paInt16,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      channels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44100&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      input&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      input_device_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;device_index,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      frames_per_buffer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recording started. Call `stop_recording` to end manually.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 启动录音线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recording_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threading&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Thread(target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;record, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(filename,))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recording_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;record&lt;/span&gt;(self, filename):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;录音线程函数，用于捕获音频数据&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recording:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, exception_on_overflow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frames&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error during recording: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stop_recording&lt;/span&gt;(self, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output.wav&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;停止录音并保存文件&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recording:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stopping recording...&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 停止录音循环&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_recording &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 等待录音线程结束&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recording_thread:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recording_thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 停止并关闭音频流&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stop_stream()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recording stopped.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 保存录音文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; wave&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(filename, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; wf:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    wf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setnchannels(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    wf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setsampwidth(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_sample_size(pyaudio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paInt16))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    wf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setframerate(&lt;span style=&#34;color:#ae81ff&#34;&gt;44100&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    wf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;writeframes(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;frames))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Recording saved as &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;filename&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;关闭 PyAudio 实例&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminate()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 使用示例&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recorder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AudioRecorder()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    1. 列出所有录音设备&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    输出示例&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Index: 0, Name: “钱甫新的iPhone”的麦克风&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Index: 1, Name: MacBook Air麦克风&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_input_devices()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    2. 选择一个设备进行录音（此处以设备索引0为例，具体要使用哪个录音设备，请参考具体的【列出所有录音设备】输出结果）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start_recording(device_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_recording.wav&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 模拟一些操作或等待录音，用户可以在适当的时候手动停止录音&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    3. 手动接入停止录音&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stop_recording(filename&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_recording.wav&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 最后关闭 PyAudio 实例&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recorder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;环境&#34;&gt;环境&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;python3.10&#xA;&#xA;PyAudio==0.2.14&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>pythonGUI实现大模型流式对话_whisper_ollama</title>
      <link>https://qianfuxin.gitHub.io/post/pythongui%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E5%BC%8F%E5%AF%B9%E8%AF%9D_whisper_ollama/</link>
      <pubDate>Tue, 24 Sep 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/pythongui%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%B5%81%E5%BC%8F%E5%AF%B9%E8%AF%9D_whisper_ollama/</guid>
      <description>&lt;h1 id=&#34;服务部署&#34;&gt;服务部署&lt;/h1&gt;&#xA;&lt;h2 id=&#34;部署whisper-api服务&#34;&gt;部署whisper api服务&lt;/h2&gt;&#xA;&lt;pre&gt;&lt;code&gt;version: &#39;3.8&#39;&#xA;&#xA;services:&#xA;  whisper-asr:&#xA;    image: onerahmet/openai-whisper-asr-webservice:latest&#xA;    container_name: whisper-asr-service&#xA;    ports:&#xA;      - &amp;quot;9099:9000&amp;quot;&#xA;    volumes:&#xA;      - /Users/qianfuxin/dc/whisper:/root/.cache/whisper&#xA;    environment:&#xA;      - ASR_MODEL=base&#xA;      - ASR_ENGINE=openai_whisper&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;部署ollama&#34;&gt;部署ollama&lt;/h2&gt;&#xA;&lt;p&gt;见官网&lt;/p&gt;&#xA;&lt;h1 id=&#34;代码&#34;&gt;代码&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;import mimetypes&#xA;import os&#xA;import sys&#xA;from datetime import datetime&#xA;import socksio&#xA;import requests&#xA;from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QTextEdit&#xA;import pyaudio&#xA;import wave&#xA;import threading&#xA;from langchain_core.messages import HumanMessage, SystemMessage&#xA;from langchain_core.output_parsers import StrOutputParser&#xA;from langchain_openai import ChatOpenAI&#xA;&#xA;&#xA;def transcribe_audio(file_path):&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    Function to transcribe audio using the ASR service.&#xA;&#xA;    :param file_path: The full path to the audio file to be transcribed.&#xA;    :return: The response text from the ASR service.&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    # Ensure the file exists&#xA;    if not os.path.isfile(file_path):&#xA;        raise FileNotFoundError(f&amp;quot;Audio file not found at: {file_path}&amp;quot;)&#xA;&#xA;    # Determine MIME type&#xA;    mime_type, _ = mimetypes.guess_type(file_path)&#xA;    if mime_type is None:&#xA;        raise ValueError(f&amp;quot;Unable to determine MIME type for file: {file_path}&amp;quot;)&#xA;&#xA;    # Extract file name&#xA;    file_name = os.path.basename(file_path)&#xA;&#xA;    url = &amp;quot;http://localhost:9099/asr&amp;quot;&#xA;    params = {&#xA;        &amp;quot;encode&amp;quot;: &amp;quot;true&amp;quot;,&#xA;        &amp;quot;task&amp;quot;: &amp;quot;transcribe&amp;quot;,&#xA;        &amp;quot;language&amp;quot;: &amp;quot;zh&amp;quot;,&#xA;        &amp;quot;initial_prompt&amp;quot;: &amp;quot;这是一段简体中文&amp;quot;,&#xA;        &amp;quot;word_timestamps&amp;quot;: &amp;quot;false&amp;quot;,&#xA;        &amp;quot;output&amp;quot;: &amp;quot;txt&amp;quot;&#xA;    }&#xA;    headers = {&#xA;        &amp;quot;accept&amp;quot;: &amp;quot;application/json&amp;quot;,&#xA;    }&#xA;&#xA;    # Open the audio file&#xA;    with open(file_path, &amp;quot;rb&amp;quot;) as audio_file:&#xA;        files = {&#xA;            &amp;quot;audio_file&amp;quot;: (file_name, audio_file, mime_type)&#xA;        }&#xA;&#xA;        # Send the POST request&#xA;        response = requests.post(url, headers=headers, params=params, files=files)&#xA;    return response.text&#xA;&#xA;&#xA;def get_model(base_url=&amp;quot;http://127.0.0.1:11434/v1&amp;quot;):&#xA;    &amp;quot;&amp;quot;&amp;quot;Get the AI model instance.&amp;quot;&amp;quot;&amp;quot;&#xA;    model = ChatOpenAI(&#xA;        api_key=&amp;quot;ollama&amp;quot;,&#xA;        model=&amp;quot;qwen2&amp;quot;,&#xA;        base_url=base_url&#xA;    )&#xA;    return model&#xA;&#xA;&#xA;class AudioRecorder:&#xA;    def __init__(self):&#xA;        self.p = pyaudio.PyAudio()&#xA;        self.stream = None&#xA;        self.frames = []&#xA;        self.device_index = None&#xA;        self.is_recording = False&#xA;        self.recording_thread = None&#xA;&#xA;    def list_input_devices(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;List available input devices.&amp;quot;&amp;quot;&amp;quot;&#xA;        device_list = []&#xA;        for i in range(self.p.get_device_count()):&#xA;            device_info = self.p.get_device_info_by_index(i)&#xA;            if device_info[&amp;quot;maxInputChannels&amp;quot;] &amp;gt; 0:&#xA;                device_list.append((i, device_info[&amp;quot;name&amp;quot;]))&#xA;        return device_list&#xA;&#xA;    def start_recording(self, device_index):&#xA;        &amp;quot;&amp;quot;&amp;quot;Start recording with the specified device.&amp;quot;&amp;quot;&amp;quot;&#xA;        self.device_index = device_index&#xA;        self.frames = []&#xA;        self.is_recording = True&#xA;&#xA;        self.stream = self.p.open(format=pyaudio.paInt16,&#xA;                                  channels=1,&#xA;                                  rate=44100,&#xA;                                  input=True,&#xA;                                  input_device_index=device_index,&#xA;                                  frames_per_buffer=1024)&#xA;&#xA;        self.recording_thread = threading.Thread(target=self.record)&#xA;        self.recording_thread.start()&#xA;&#xA;    def record(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;Record audio in a separate thread.&amp;quot;&amp;quot;&amp;quot;&#xA;        try:&#xA;            while self.is_recording:&#xA;                data = self.stream.read(1024, exception_on_overflow=False)&#xA;                self.frames.append(data)&#xA;        except IOError as e:&#xA;            print(f&amp;quot;Buffer overflow occurred: {e}&amp;quot;)&#xA;&#xA;    def stop_recording(self, filename):&#xA;        &amp;quot;&amp;quot;&amp;quot;Stop recording and save the file.&amp;quot;&amp;quot;&amp;quot;&#xA;        if self.is_recording:&#xA;            self.is_recording = False&#xA;            if self.recording_thread and self.recording_thread.is_alive():&#xA;                self.recording_thread.join()&#xA;&#xA;            if self.stream:&#xA;                self.stream.stop_stream()&#xA;                self.stream.close()&#xA;                self.stream = None&#xA;&#xA;            with wave.open(filename, &#39;wb&#39;) as wf:&#xA;                wf.setnchannels(1)&#xA;                wf.setsampwidth(self.p.get_sample_size(pyaudio.paInt16))&#xA;                wf.setframerate(44100)&#xA;                wf.writeframes(b&#39;&#39;.join(self.frames))&#xA;&#xA;    def close(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;Close the PyAudio instance.&amp;quot;&amp;quot;&amp;quot;&#xA;        self.p.terminate()&#xA;&#xA;&#xA;class RecorderApp(QWidget):&#xA;    def __init__(self):&#xA;        super().__init__()&#xA;&#xA;        self.recorder = AudioRecorder()&#xA;        self.filename = None&#xA;        self.model = get_model()&#xA;        self.init_ui()&#xA;&#xA;    def init_ui(self):&#xA;        self.setWindowTitle(&amp;quot;实时语音识别与问答&amp;quot;)&#xA;        self.setGeometry(100, 100, 500, 400)&#xA;&#xA;        layout = QVBoxLayout()&#xA;&#xA;        # 开启录音按钮&#xA;        self.start_button = QPushButton(&amp;quot;开启录音&amp;quot;)&#xA;        self.start_button.clicked.connect(self.start_recording)&#xA;        layout.addWidget(self.start_button)&#xA;&#xA;        # 结束录音按钮&#xA;        self.stop_button = QPushButton(&amp;quot;结束录音&amp;quot;)&#xA;        self.stop_button.clicked.connect(self.stop_recording)&#xA;        self.stop_button.setEnabled(False)&#xA;        layout.addWidget(self.stop_button)&#xA;&#xA;        # 状态显示标签&#xA;        self.status_label = QLabel(&amp;quot;用户问题: &amp;quot;, self)&#xA;        layout.addWidget(self.status_label)&#xA;&#xA;        # 输出结果框&#xA;        self.output_box = QTextEdit(self)&#xA;        self.output_box.setReadOnly(True)&#xA;        layout.addWidget(self.output_box)&#xA;&#xA;        self.setLayout(layout)&#xA;&#xA;    def start_recording(self):&#xA;        device_index = 0  # For simplicity, we assume default device.&#xA;        start_time = datetime.now().strftime(&amp;quot;%Y%m%d_%H%M%S&amp;quot;)&#xA;        self.filename = f&amp;quot;{start_time}.wav&amp;quot;&#xA;&#xA;        self.recorder.start_recording(device_index)&#xA;        self.start_button.setEnabled(False)&#xA;        self.stop_button.setEnabled(True)&#xA;&#xA;    def stop_recording(self):&#xA;        self.recorder.stop_recording(self.filename)&#xA;        self.start_button.setEnabled(True)&#xA;        self.stop_button.setEnabled(False)&#xA;&#xA;        # 转录音频并生成回答&#xA;        transcription = transcribe_audio(self.filename)&#xA;        self.status_label.setText(f&amp;quot;用户问题: {transcription}&amp;quot;)&#xA;        self.generate_answer(transcription)&#xA;&#xA;    def generate_answer(self, transcription):&#xA;        &amp;quot;&amp;quot;&amp;quot;&#xA;        Send the transcription to the large model and display the streamed response.&#xA;        &amp;quot;&amp;quot;&amp;quot;&#xA;        QApplication.processEvents()&#xA;&#xA;        messages = [&#xA;            SystemMessage(&amp;quot;你是一个智能助手。&amp;quot;),&#xA;            HumanMessage(content=transcription)&#xA;        ]&#xA;        parser = StrOutputParser()&#xA;        chain = self.model | parser&#xA;&#xA;        response = &amp;quot;&amp;quot;&#xA;        for token in chain.stream(messages):&#xA;            response += token&#xA;            self.output_box.setText(response)&#xA;            QApplication.processEvents()&#xA;&#xA;&#xA;if __name__ == &amp;quot;__main__&amp;quot;:&#xA;    app = QApplication(sys.argv)&#xA;    window = RecorderApp()&#xA;    window.show()&#xA;    sys.exit(app.exec_())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;仅仅实现asr&#34;&gt;仅仅实现ASR&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;import mimetypes&#xA;import os&#xA;import sys&#xA;from datetime import datetime&#xA;&#xA;import requests&#xA;from PyQt5.QtGui import QIcon&#xA;from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QLineEdit, QComboBox, QMessageBox, \&#xA;    QSystemTrayIcon, QMenu, QAction&#xA;import pyaudio&#xA;import wave&#xA;import threading&#xA;&#xA;&#xA;def transcribe_audio(file_path):&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    Function to transcribe audio using the ASR service.&#xA;&#xA;    :param file_path: The full path to the audio file to be transcribed.&#xA;    :return: The response text from the ASR service.&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    # Ensure the file exists&#xA;    if not os.path.isfile(file_path):&#xA;        raise FileNotFoundError(f&amp;quot;Audio file not found at: {file_path}&amp;quot;)&#xA;&#xA;    # Determine MIME type&#xA;    mime_type, _ = mimetypes.guess_type(file_path)&#xA;    if mime_type is None:&#xA;        raise ValueError(f&amp;quot;Unable to determine MIME type for file: {file_path}&amp;quot;)&#xA;&#xA;    # Extract file name&#xA;    file_name = os.path.basename(file_path)&#xA;&#xA;    url = &amp;quot;http://localhost:9099/asr&amp;quot;&#xA;    params = {&#xA;        &amp;quot;encode&amp;quot;: &amp;quot;true&amp;quot;,&#xA;        &amp;quot;task&amp;quot;: &amp;quot;transcribe&amp;quot;,&#xA;        &amp;quot;language&amp;quot;: &amp;quot;zh&amp;quot;,&#xA;        &amp;quot;initial_prompt&amp;quot;: &amp;quot;这是一段简体中文&amp;quot;,&#xA;        &amp;quot;word_timestamps&amp;quot;: &amp;quot;false&amp;quot;,&#xA;        &amp;quot;output&amp;quot;: &amp;quot;txt&amp;quot;&#xA;    }&#xA;    headers = {&#xA;        &amp;quot;accept&amp;quot;: &amp;quot;application/json&amp;quot;,&#xA;    }&#xA;&#xA;    # Open the audio file&#xA;    with open(file_path, &amp;quot;rb&amp;quot;) as audio_file:&#xA;        files = {&#xA;            &amp;quot;audio_file&amp;quot;: (file_name, audio_file, mime_type)&#xA;        }&#xA;&#xA;        # Send the POST request&#xA;        response = requests.post(url, headers=headers, params=params, files=files)&#xA;&#xA;    return response.text&#xA;&#xA;&#xA;class AudioRecorder:&#xA;    def __init__(self):&#xA;        self.p = pyaudio.PyAudio()&#xA;        self.stream = None&#xA;        self.frames = []&#xA;        self.device_index = None&#xA;        self.is_recording = False&#xA;        self.recording_thread = None&#xA;&#xA;    def list_input_devices(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;列出所有可用的录音设备&amp;quot;&amp;quot;&amp;quot;&#xA;        device_list = []&#xA;        for i in range(self.p.get_device_count()):&#xA;            device_info = self.p.get_device_info_by_index(i)&#xA;            # 筛选出录音设备&#xA;            if device_info[&amp;quot;maxInputChannels&amp;quot;] &amp;gt; 0:&#xA;                device_list.append((i, device_info[&amp;quot;name&amp;quot;]))&#xA;        return device_list&#xA;&#xA;    def start_recording(self, device_index):&#xA;        &amp;quot;&amp;quot;&amp;quot;使用指定设备开始录音&amp;quot;&amp;quot;&amp;quot;&#xA;        self.device_index = device_index&#xA;        self.frames = []&#xA;        self.is_recording = True&#xA;&#xA;        self.stream = self.p.open(format=pyaudio.paInt16,&#xA;                                  channels=1,&#xA;                                  rate=44100,&#xA;                                  input=True,&#xA;                                  input_device_index=device_index,&#xA;                                  frames_per_buffer=1024)&#xA;&#xA;        # 启动录音线程&#xA;        self.recording_thread = threading.Thread(target=self.record)&#xA;        self.recording_thread.start()&#xA;&#xA;    def record(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;录音线程函数，用于捕获音频数据&amp;quot;&amp;quot;&amp;quot;&#xA;        try:&#xA;            while self.is_recording:&#xA;                data = self.stream.read(1024, exception_on_overflow=False)&#xA;                self.frames.append(data)&#xA;        except IOError as e:&#xA;            print(f&amp;quot;Buffer overflow occurred: {e}&amp;quot;)&#xA;&#xA;    def stop_recording(self, filename):&#xA;        &amp;quot;&amp;quot;&amp;quot;停止录音并保存文件&amp;quot;&amp;quot;&amp;quot;&#xA;        if self.is_recording:&#xA;            self.is_recording = False&#xA;            if self.recording_thread and self.recording_thread.is_alive():&#xA;                self.recording_thread.join()&#xA;&#xA;            if self.stream:&#xA;                self.stream.stop_stream()&#xA;                self.stream.close()&#xA;                self.stream = None&#xA;&#xA;            with wave.open(filename, &#39;wb&#39;) as wf:&#xA;                wf.setnchannels(1)&#xA;                wf.setsampwidth(self.p.get_sample_size(pyaudio.paInt16))&#xA;                wf.setframerate(44100)&#xA;                wf.writeframes(b&#39;&#39;.join(self.frames))&#xA;&#xA;    def close(self):&#xA;        &amp;quot;&amp;quot;&amp;quot;关闭 PyAudio 实例&amp;quot;&amp;quot;&amp;quot;&#xA;        self.p.terminate()&#xA;&#xA;&#xA;def resource_path(relative_path):&#xA;    &amp;quot;&amp;quot;&amp;quot;获取资源文件的绝对路径&amp;quot;&amp;quot;&amp;quot;&#xA;    if hasattr(sys, &#39;_MEIPASS&#39;):&#xA;        return os.path.join(sys._MEIPASS, relative_path)&#xA;    return os.path.join(os.path.abspath(&amp;quot;.&amp;quot;), relative_path)&#xA;&#xA;&#xA;class RecorderApp(QWidget):&#xA;    def __init__(self):&#xA;        super().__init__()&#xA;&#xA;        self.recorder = AudioRecorder()&#xA;        self.filename = None&#xA;&#xA;        self.init_ui()&#xA;&#xA;    def init_ui(self):&#xA;        self.setWindowTitle(&amp;quot;录音器&amp;quot;)&#xA;        self.setGeometry(100, 100, 400, 300)&#xA;&#xA;        # 创建系统托盘图标&#xA;        self.tray_icon = QSystemTrayIcon(self)&#xA;        self.tray_icon.setIcon(QIcon(resource_path(&amp;quot;icon.png&amp;quot;)))&#xA;&#xA;        # 创建托盘菜单&#xA;        tray_menu = QMenu()&#xA;&#xA;        # 添加显示窗口的选项&#xA;        show_action = QAction(&amp;quot;显示窗口&amp;quot;, self)&#xA;        show_action.triggered.connect(self.show)&#xA;        tray_menu.addAction(show_action)&#xA;&#xA;        # 添加退出的选项&#xA;        exit_action = QAction(&amp;quot;退出&amp;quot;, self)&#xA;        exit_action.triggered.connect(QApplication.instance().quit)&#xA;        tray_menu.addAction(exit_action)&#xA;&#xA;        # 将菜单添加到托盘图标&#xA;        self.tray_icon.setContextMenu(tray_menu)&#xA;&#xA;        # 设置点击双击托盘图标的动作&#xA;        self.tray_icon.activated.connect(self.on_tray_icon_activated)&#xA;&#xA;        # 显示托盘图标&#xA;        self.tray_icon.show()&#xA;&#xA;        layout = QVBoxLayout()&#xA;&#xA;        # 开启录音按钮&#xA;        self.start_button = QPushButton(&amp;quot;开启录音&amp;quot;)&#xA;        self.start_button.clicked.connect(self.start_recording)&#xA;        layout.addWidget(self.start_button)&#xA;&#xA;        # 结束录音按钮&#xA;        self.stop_button = QPushButton(&amp;quot;结束录音&amp;quot;)&#xA;        self.stop_button.clicked.connect(self.stop_recording)&#xA;        self.stop_button.setEnabled(False)&#xA;        layout.addWidget(self.stop_button)&#xA;&#xA;        # 设备选择下拉菜单&#xA;        self.device_selector = QComboBox(self)&#xA;        devices = self.recorder.list_input_devices()&#xA;        if devices:&#xA;            for index, name in devices:&#xA;                self.device_selector.addItem(name, index)&#xA;        else:&#xA;            QMessageBox.warning(self, &amp;quot;错误&amp;quot;, &amp;quot;未检测到录音设备&amp;quot;)&#xA;            self.start_button.setEnabled(False)&#xA;        layout.addWidget(self.device_selector)&#xA;&#xA;        # 状态显示标签&#xA;        self.status_label = QLabel(&amp;quot;状态: 未录音&amp;quot;, self)&#xA;        layout.addWidget(self.status_label)&#xA;&#xA;        self.setLayout(layout)&#xA;&#xA;    def closeEvent(self, event):&#xA;        &amp;quot;&amp;quot;&amp;quot;窗口关闭事件&amp;quot;&amp;quot;&amp;quot;&#xA;        if self.isVisible():  # 如果窗口可见，则最小化到托盘&#xA;            event.ignore()&#xA;            self.hide()&#xA;            self.tray_icon.showMessage(&#xA;                &amp;quot;应用最小化&amp;quot;, &amp;quot;程序已最小化到托盘&amp;quot;,&#xA;                QSystemTrayIcon.Information, 2000&#xA;            )&#xA;        else:  # 关闭应用时清理资源&#xA;            self.recorder.close()&#xA;            event.accept()&#xA;&#xA;    def on_tray_icon_activated(self, reason):&#xA;        &amp;quot;&amp;quot;&amp;quot;托盘图标激活事件&amp;quot;&amp;quot;&amp;quot;&#xA;        if reason == QSystemTrayIcon.DoubleClick:&#xA;            self.show()&#xA;&#xA;    def start_recording(self):&#xA;        device_index = self.device_selector.currentData()&#xA;        start_time = datetime.now().strftime(&amp;quot;%Y%m%d_%H%M%S&amp;quot;)&#xA;        self.filename = f&amp;quot;{start_time}.wav&amp;quot;&#xA;&#xA;        self.recorder.start_recording(device_index)&#xA;        self.status_label.setText(&amp;quot;状态: 录音中...&amp;quot;)&#xA;        self.start_button.setEnabled(False)&#xA;        self.stop_button.setEnabled(True)&#xA;&#xA;    def stop_recording(self):&#xA;        end_time = datetime.now().strftime(&amp;quot;%Y%m%d_%H%M%S&amp;quot;)&#xA;        self.filename = f&amp;quot;{self.filename[:-4]}-{end_time}.wav&amp;quot;  # 更新文件名&#xA;        self.recorder.stop_recording(self.filename)&#xA;        self.status_label.setText(f&amp;quot;状态: 录音已保存为 {self.filename}&amp;quot;)&#xA;        self.start_button.setEnabled(True)&#xA;        self.stop_button.setEnabled(False)&#xA;        self.status_label.setText(f&amp;quot;状态: 录音已保存为 {self.filename}\n录音内容：{transcribe_audio(self.filename)}&amp;quot;)&#xA;&#xA;&#xA;# 主程序入口&#xA;if __name__ == &amp;quot;__main__&amp;quot;:&#xA;    app = QApplication(sys.argv)&#xA;    window = RecorderApp()&#xA;    window.show()&#xA;    sys.exit(app.exec_())&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;    pyinstaller --onefile --windowed --noconfirm --add-data &amp;quot;icon.png;.&amp;quot; app.py&#xA;    &amp;quot;&amp;quot;&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>memcached的部署与python调用</title>
      <link>https://qianfuxin.gitHub.io/post/memcached%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8Epython%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 23 Sep 2024 10:58:08 +0000</pubDate>
      <guid>https://qianfuxin.gitHub.io/post/memcached%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8Epython%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;部署&#34;&gt;部署&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.8&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;memcached:  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;image: memcached  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;container_name: memcached  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ports:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;11211:11211&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;python调用&#34;&gt;python调用&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;from pymemcache.client import base&#xA;&#xA;# 连接到 Memcached 服务&#xA;client = base.Client((&#39;localhost&#39;, 11211))&#xA;&#xA;# 设置一个键值对&#xA;client.set(&#39;my_key&#39;, &#39;Hello, Memcached!&#39;)&#xA;&#xA;# 获取存储的值&#xA;value = client.get(&#39;my_key&#39;)&#xA;print(f&#39;Value for my_key: {value.decode(&amp;quot;utf-8&amp;quot;)}&#39;)&#xA;&#xA;# 删除键值对&#xA;client.delete(&#39;my_key&#39;)&#xA;&#xA;# 关闭连接&#xA;client.close()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;&#xA;&lt;p&gt;memcached是一个很单纯的缓存服务（减少数据库压力），数据存放在内存，所以没必要本地映射，&#xA;而且不支持身份验证，所以需要在容器互联时使用，不应该让外部访问。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
